# lir_passes

"test:main" {
	let x: score = val 7s;
	mul %x, 8s;
	let y: score = val %x;
	use %y;
}

"test:op_to_cast" {
	let x: score = val 10s;
	add %x, 8s;
	let y: nint = cast nint %x;
}

"test:copy_prop" {
	# Also tests LIR DSE
	let x: score = val sco @s[] "foo";
	let y: score = val %x;
	let z: score = val sco @s[] "bar";
	add %z, %y;
	use %z;
}

# Test that a copy of the original location
# is created so that a modified propagation
# isn't reused when the original value is expected
"test:copy_prop_multiple" {
	let a: score = val sco @s[] "foo";
	let b: score = val %a;
	mul %b, 10s;
	let c: score = val %a;
	div %c, 3s;
	let d: score = val %a;
	add %d, 100s;
	use %b;
	use %c;
	use %d;
}

"test:copy_elision" {
	call run "test:copy_elision_fn";
}

"test:copy_elision_fn" score {
	let x: score = val &0;
	mul %x, 5s;
	use %x;
	let y: score = val &0;
	mul %y, 10s;
	use %y;
}

"test:copy_elision_add" score score : score {
	let x: score = val &0;
	let y: score = val &1;
	add %x, %y;
	retv 0, %x;
}
